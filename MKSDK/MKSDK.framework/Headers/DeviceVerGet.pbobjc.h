// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceVerGet.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DeviceVerGetDeviceVer;
@class DeviceVerGetQueryInfo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - DeviceVerGetDeviceVerGetRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface DeviceVerGetDeviceVerGetRoot : GPBRootObject
@end

#pragma mark - DeviceVerGetDeviceVer

typedef GPB_ENUM(DeviceVerGetDeviceVer_FieldNumber) {
  DeviceVerGetDeviceVer_FieldNumber_DeviceId = 1,
  DeviceVerGetDeviceVer_FieldNumber_SubDeviceId = 2,
  DeviceVerGetDeviceVer_FieldNumber_SwVer = 3,
  DeviceVerGetDeviceVer_FieldNumber_HwVer = 4,
  DeviceVerGetDeviceVer_FieldNumber_RomFlag = 7,
  DeviceVerGetDeviceVer_FieldNumber_NewSwVer = 8,
  DeviceVerGetDeviceVer_FieldNumber_ChangeLog = 9,
};

@interface DeviceVerGetDeviceVer : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *subDeviceId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *swVer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *hwVer;

/** 0: 不需要更新固件; 1: 需要更新固件 */
@property(nonatomic, readwrite) int32_t romFlag;

/**
 * 设备新版本号 主xx.子xx.修正xx
 * 版本号变更为Int数据进行保存.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *newSwVer NS_RETURNS_NOT_RETAINED;

/** 版本变更记录 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *changeLog;

@end

#pragma mark - DeviceVerGetQueryInfo

typedef GPB_ENUM(DeviceVerGetQueryInfo_FieldNumber) {
  DeviceVerGetQueryInfo_FieldNumber_DeviceId = 1,
  DeviceVerGetQueryInfo_FieldNumber_SubDeviceId = 2,
};

@interface DeviceVerGetQueryInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *subDeviceId;

@end

#pragma mark - DeviceVerGetRpcRequest

typedef GPB_ENUM(DeviceVerGetRpcRequest_FieldNumber) {
  DeviceVerGetRpcRequest_FieldNumber_AccessToken = 1,
  DeviceVerGetRpcRequest_FieldNumber_QueryArray = 11,
};

/**
 * 请求方填写
 **/
@interface DeviceVerGetRpcRequest : GPBMessage

/** true; access_token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *accessToken;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DeviceVerGetQueryInfo*> *queryArray;
/** The number of items in @c queryArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger queryArray_Count;

@end

#pragma mark - DeviceVerGetRpcResponse

typedef GPB_ENUM(DeviceVerGetRpcResponse_FieldNumber) {
  DeviceVerGetRpcResponse_FieldNumber_VersArray = 11,
};

/**
 * 返回方填写
 **/
@interface DeviceVerGetRpcResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DeviceVerGetDeviceVer*> *versArray;
/** The number of items in @c versArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger versArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
